// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl
/** 
 * The Memory chip implements the complete address space of the Hack data memory,
 * including the RAM and memory mapped I/O.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 results in accessing the RAM;
 * Access to address 16384 to 24575 results in accessing the Screen memory map;
 * Access to address 24576 results in accessing the Keyboard memory map.
 */ 
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /**
    * Get Main Ram output.
    */
    Not(in=address[14], out=mainRamSelected);
    And(a=load, b=mainRamSelected, out=loadMainRam);
    RAM16K(in=in, address=address[0..13], load=loadMainRam, out=mainRamOut);

    /**
    * Get Screen output.
    */
    Not(in=mainRamSelected, out=mainRamNotSelected);
    Not(in=address[13], out=canLoadScreen);
    And(a=mainRamNotSelected, b=canLoadScreen, out=screenSelected);
    And(a=load, b=screenSelected, out=loadScreen);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);

    /**
    * Get Keyboard output.
    */
    And(a=mainRamNotSelected, b=address[13], out=lastTwoBitsAreOne);
    Or8Way(in=address[5..12], out=orEightBits);
    Or(a=orEightBits, b=address[4], out=or0);
    Or(a=or0, b=address[3], out=or1);
    Or(a=or1, b=address[2], out=or2);
    Or(a=or2, b=address[1], out=or3);
    Or(a=or3, b=address[0], out=orFirst13Bits);
    Not(in=orFirst13Bits, out=first13BitsAreZero);
    And(a=first13BitsAreZero, b=lastTwoBitsAreOne, out=keyboardSelected);
    Keyboard(out=keyboardOut);
    
    /**
    * Select between the three outputs. 
    */
    Mux16(a=false, b=mainRamOut, sel=mainRamSelected, out=mainRamOutMasked);
    Mux16(a=false, b=screenOut, sel=screenSelected, out=screenOutMasked);
    Mux16(a=false, b=keyboardOut, sel=keyboardSelected, out=keyboardMasked);
    Add16(a=mainRamOutMasked, b=screenOutMasked, out=partialOutput);
    Add16(a=partialOutput, b=keyboardMasked, out=out);
}
